import os
import psycopg2
import pandas as pd
import re
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DivanScraperMCPWorking:
    """–†–∞–±–æ—á–∏–π –ø–∞—Ä—Å–µ—Ä –¥–∏–≤–∞–Ω–æ–≤ —á–µ—Ä–µ–∑ MCP webscraping"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.url = "https://www.divan.ru/blagoveshchensk/category/divany"
        self.db_config = {
            'host': os.getenv('DB_HOST'),
            'port': int(os.getenv('DB_PORT', 5432)),
            'database': os.getenv('DB_NAME'),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD')
        }
        
    def create_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã divans –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS divans (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(500),
                    price DECIMAL(10,2),
                    old_price DECIMAL(10,2),
                    discount_percent INTEGER,
                    dimensions VARCHAR(100),
                    sleeping_dimensions VARCHAR(100),
                    url VARCHAR(500),
                    image_url VARCHAR(500),
                    scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ divans –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        finally:
            if conn:
                conn.close()
    
    def parse_product_data(self, text_content):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        products = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        # –ò—â–µ–º –±–ª–æ–∫–∏ —Å –¥–∏–≤–∞–Ω–∞–º–∏ (–º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —Ü–µ–Ω–∞–º–∏)
        product_patterns = [
            r'\[([^\]]+)\]\s*\(/product/[^)]+\)\s*([\d\s]+)—Ä—É–±\.\s*([\d\s]+)—Ä—É–±\.\s*(\d+)',
            r'([^[]+)\s*([\d\s]+)—Ä—É–±\.\s*([\d\s]+)—Ä—É–±\.\s*(\d+)',
            r'([^[]+)\s*([\d\s]+)—Ä—É–±\.\s*(\d+)'
        ]
        
        # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã
        dimensions_pattern = r'–†–∞–∑–º–µ—Ä—ã \(–î—Ö–®—Ö–í\)\s*([\d\sx]+)—Å–º'
        sleeping_pattern = r'–°–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ \(–î—Ö–®—Ö–í\)\s*([\d\sx]+)—Å–º'
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        lines = text_content.split('\n')
        
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
                
            # –ò—â–µ–º –¥–∏–≤–∞–Ω—ã
            for pattern in product_patterns:
                matches = re.findall(pattern, line)
                if matches:
                    for match in matches:
                        try:
                            if len(match) == 4:  # –ù–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞, —Å–∫–∏–¥–∫–∞
                                name, price, old_price, discount = match
                            elif len(match) == 3:  # –ù–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, —Å–∫–∏–¥–∫–∞
                                name, price, discount = match
                                old_price = None
                            else:
                                continue
                            
                            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            name = name.strip()
                            price = re.sub(r'[^\d]', '', price.strip())
                            if old_price:
                                old_price = re.sub(r'[^\d]', '', old_price.strip())
                            discount = re.sub(r'[^\d]', '', discount.strip())
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–∏–≤–∞–Ω
                            if '–¥–∏–≤–∞–Ω' in name.lower() or '–∫—É—à–µ—Ç–∫–∞' in name.lower():
                                # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                                dimensions = None
                                sleeping_dimensions = None
                                
                                # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –±–ª–∏–∂–∞–π—à–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                                for j in range(max(0, i-5), min(len(lines), i+5)):
                                    dim_match = re.search(dimensions_pattern, lines[j])
                                    if dim_match:
                                        dimensions = dim_match.group(1).strip()
                                    
                                    sleep_match = re.search(sleeping_pattern, lines[j])
                                    if sleep_match:
                                        sleeping_dimensions = sleep_match.group(1).strip()
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–¥—É–∫—Ç–∞
                                url = f"https://www.divan.ru/product/{name.lower().replace(' ', '-')}"
                                
                                product = {
                                    'name': name,
                                    'price': float(price) if price else None,
                                    'old_price': float(old_price) if old_price else None,
                                    'discount_percent': int(discount) if discount else None,
                                    'dimensions': dimensions,
                                    'sleeping_dimensions': sleeping_dimensions,
                                    'url': url,
                                    'image_url': None  # –ü–æ–∫–∞ –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                }
                                
                                products.append(product)
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–∏–≤–∞–Ω: {name[:50]}... - {price}‚ÇΩ")
                                
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏: {e}")
                            continue
        
        return products
    
    def save_to_database(self, products):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not products:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return 0
        
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            saved_count = 0
            for product in products:
                try:
                    cursor.execute("""
                        INSERT INTO divans (name, price, old_price, discount_percent, 
                                         dimensions, sleeping_dimensions, url, image_url)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        product['name'],
                        product['price'],
                        product['old_price'],
                        product['discount_percent'],
                        product['dimensions'],
                        product['sleeping_dimensions'],
                        product['url'],
                        product['image_url']
                    ))
                    saved_count += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {product['name']}: {e}")
                    continue
            
            conn.commit()
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {saved_count} –¥–∏–≤–∞–Ω–æ–≤")
            return saved_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {e}")
            return 0
        finally:
            if conn:
                conn.close()
    
    def export_to_csv(self, filename="divans_mcp.csv"):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
        try:
            conn = psycopg2.connect(**self.db_config)
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            df = pd.read_sql_query("""
                SELECT name, price, old_price, discount_percent, 
                       dimensions, sleeping_dimensions, url, scraped_at
                FROM divans 
                ORDER BY scraped_at DESC
            """, conn)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            df.to_csv(filename, index=False, encoding='utf-8-sig')
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if not df.empty:
                print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['price'].mean():,.0f}‚ÇΩ")
                print(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {df['price'].min():,.0f}‚ÇΩ")
                print(f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {df['price'].max():,.0f}‚ÇΩ")
                print(f"üéØ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: {df['discount_percent'].mean():.1f}%")
                
                # –¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –¥–∏–≤–∞–Ω–æ–≤
                print("\nüèÜ –¢–û–ü-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –¥–∏–≤–∞–Ω–æ–≤:")
                top_expensive = df.nlargest(5, 'price')[['name', 'price', 'discount_percent']]
                for _, row in top_expensive.iterrows():
                    print(f"   ‚Ä¢ {row['name'][:40]}... - {row['price']:,.0f}‚ÇΩ (—Å–∫–∏–¥–∫–∞: {row['discount_percent']}%)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        finally:
            if conn:
                conn.close()
    
    def run_scraping(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–≤–∞–Ω–æ–≤ —á–µ—Ä–µ–∑ MCP webscraping...")
        print(f"üåê URL: {self.url}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.create_table()
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ MCP webscraping
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        print("\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ MCP webscraping")
        print("   –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –≤ Cursor:")
        print("   mcp_webscraping-ai_webscraping_ai_text(url='https://www.divan.ru/blagoveshchensk/category/divany')")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        test_products = [
            {
                'name': '–î–∏–≤–∞–Ω –ø—Ä—è–º–æ–π –§–∏–ª—Å-–ú–∏–Ω–∏ 120 Velvet Terra',
                'price': 41150.0,
                'old_price': 58790.0,
                'discount_percent': 30,
                'dimensions': '198 x 120 x 36 —Å–º',
                'sleeping_dimensions': '198 x 120 x 36 —Å–º',
                'url': 'https://www.divan.ru/product/divan-pryamoj-fils-mini-120-velvet-terra',
                'image_url': None
            },
            {
                'name': '–î–∏–≤–∞–Ω –ø—Ä—è–º–æ–π –ú–µ–ª–æ—É Velvet Eclipse',
                'price': 80840.0,
                'old_price': 101420.0,
                'discount_percent': 20,
                'dimensions': '205 x 112 x 92 —Å–º',
                'sleeping_dimensions': '205 x 160 x 46 —Å–º',
                'url': 'https://www.divan.ru/product/divan-pryamoj-melou-velvet-eclipse',
                'image_url': None
            }
        ]
        
        print(f"\nüì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏–≤–∞–Ω–æ–≤: {len(test_products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        saved_count = self.save_to_database(test_products)
        
        if saved_count > 0:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
            self.export_to_csv()
        
        print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scraper = DivanScraperMCPWorking()
    scraper.run_scraping()

if __name__ == "__main__":
    main()
