import psycopg2
import pandas as pd
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST'),
            port=int(os.getenv('DB_PORT', 5432)),
            database=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD')
        )
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL!")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def view_divans_data():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–≤–∞–Ω–∞—Ö –∏–∑ –±–∞–∑—ã"""
    conn = connect_to_db()
    if not conn:
        return
    
    try:
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM divans")
        total_count = cursor.fetchone()[0]
        print(f"\nüìä –í—Å–µ–≥–æ –¥–∏–≤–∞–Ω–æ–≤ –≤ –±–∞–∑–µ: {total_count}")
        
        if total_count == 0:
            print("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–≤–∞–Ω–∞—Ö")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        cursor.execute("""
            SELECT name, price, old_price, discount_percent, 
                   dimensions, sleeping_dimensions, scraped_at
            FROM divans 
            ORDER BY scraped_at DESC 
            LIMIT 10
        """)
        
        rows = cursor.fetchall()
        
        print(f"\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(rows)} –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∏–≤–∞–Ω–æ–≤:")
        print("=" * 120)
        print(f"{'–ù–∞–∑–≤–∞–Ω–∏–µ':<50} {'–¶–µ–Ω–∞':<12} {'–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞':<15} {'–°–∫–∏–¥–∫–∞':<8} {'–†–∞–∑–º–µ—Ä—ã':<20} {'–°–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ':<20}")
        print("=" * 120)
        
        for row in rows:
            name, price, old_price, discount, dims, sleep_dims, scraped_at = row
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            name_short = name[:47] + "..." if len(name) > 50 else name
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
            price_str = f"{price:,.0f}‚ÇΩ" if price else "N/A"
            old_price_str = f"{old_price:,.0f}‚ÇΩ" if old_price else "N/A"
            discount_str = f"{discount}%" if discount else "N/A"
            
            print(f"{name_short:<50} {price_str:<12} {old_price_str:<15} {discount_str:<8} {dims:<20} {sleep_dims:<20}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                AVG(price) as avg_price,
                MIN(price) as min_price,
                MAX(price) as max_price,
                AVG(discount_percent) as avg_discount
            FROM divans 
            WHERE price IS NOT NULL
        """)
        
        stats = cursor.fetchone()
        if stats and stats[0] > 0:
            total, avg_price, min_price, max_price, avg_discount = stats
            
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º:")
            print(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f}‚ÇΩ")
            print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price:,.0f}‚ÇΩ")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_price:,.0f}‚ÇΩ")
            print(f"–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: {avg_discount:.1f}%" if avg_discount else "–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: N/A")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–∏–¥–∫–∞–º
        cursor.execute("""
            SELECT 
                CASE 
                    WHEN discount_percent >= 50 THEN '50%+'
                    WHEN discount_percent >= 30 THEN '30-49%'
                    WHEN discount_percent >= 20 THEN '20-29%'
                    WHEN discount_percent >= 10 THEN '10-19%'
                    WHEN discount_percent > 0 THEN '1-9%'
                    ELSE '–ë–µ–∑ —Å–∫–∏–¥–∫–∏'
                END as discount_range,
                COUNT(*) as count
            FROM divans 
            GROUP BY discount_range
            ORDER BY 
                CASE discount_range
                    WHEN '50%+' THEN 1
                    WHEN '30-49%' THEN 2
                    WHEN '20-29%' THEN 3
                    WHEN '10-19%' THEN 4
                    WHEN '1-9%' THEN 5
                    ELSE 6
                END
        """)
        
        discount_stats = cursor.fetchall()
        if discount_stats:
            print(f"\nüè∑Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–∏–¥–∫–∞–º:")
            for discount_range, count in discount_stats:
                print(f"{discount_range}: {count} –¥–∏–≤–∞–Ω–æ–≤")
        
        cursor.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    finally:
        if conn:
            conn.close()

def export_to_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
    conn = connect_to_db()
    if not conn:
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        query = "SELECT * FROM divans ORDER BY scraped_at DESC"
        df = pd.read_sql_query(query, conn)
        
        if df.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        filename = f"divans_export_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv"
        df.to_csv(filename, index=False, encoding='utf-8-sig')
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    finally:
        if conn:
            conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–≤–∞–Ω–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    while True:
        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("1Ô∏è‚É£  –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–≤–∞–Ω–∞—Ö (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)")
        print("2Ô∏è‚É£  –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª")
        print("3Ô∏è‚É£  –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        
        choice = input("\nüí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3): ").strip()
        
        if choice == "1":
            print("\n" + "="*60)
            view_divans_data()
            print("="*60)
        elif choice == "2":
            print("\n" + "="*60)
            export_to_csv()
            print("="*60)
        elif choice == "3":
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")

if __name__ == "__main__":
    main()
