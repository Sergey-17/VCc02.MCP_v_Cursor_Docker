import requests
from bs4 import BeautifulSoup
import psycopg2
import pandas as pd
import time
import re
from datetime import datetime
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DivanScraper:
    def __init__(self):
        self.base_url = "https://www.divan.ru/blagoveshchensk/category/divany"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        self.db_config = {
            'host': os.getenv('DB_HOST'),
            'port': int(os.getenv('DB_PORT', 5432)),
            'database': os.getenv('DB_NAME'),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD')
        }
        
    def create_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∏–≤–∞–Ω–æ–≤"""
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            create_table_query = """
            CREATE TABLE IF NOT EXISTS divans (
                id SERIAL PRIMARY KEY,
                name VARCHAR(500),
                price DECIMAL(10,2),
                old_price DECIMAL(10,2),
                discount_percent INTEGER,
                dimensions VARCHAR(100),
                sleeping_dimensions VARCHAR(100),
                url VARCHAR(500),
                image_url VARCHAR(500),
                scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """
            
            cursor.execute(create_table_query)
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ divans —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        finally:
            if conn:
                conn.close()
    
    def extract_price(self, price_text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not price_text:
            return None
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        price_match = re.search(r'[\d\s]+', price_text.replace('—Ä—É–±.', '').strip())
        if price_match:
            price_str = price_match.group().replace(' ', '')
            try:
                return float(price_str)
            except ValueError:
                return None
        return None
    
    def extract_dimensions(self, specs_list):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        dimensions = {}
        if specs_list:
            for spec in specs_list.find_all('li', class_='aoJQe'):
                spec_name = spec.find('span', class_='u0pek')
                spec_value = spec.find('span', class_='vdukP')
                
                if spec_name and spec_value:
                    name = spec_name.get_text().strip()
                    value = spec_value.get_text().strip()
                    
                    if '–†–∞–∑–º–µ—Ä—ã (–î—Ö–®—Ö–í)' in name:
                        dimensions['dimensions'] = value
                    elif '–°–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ (–î—Ö–®—Ö–í)' in name:
                        dimensions['sleeping_dimensions'] = value
        
        return dimensions
    
    def parse_products(self, soup):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        products = []
        
        # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ data-testid
        product_cards = soup.find_all('div', attrs={'data-testid': 'product-card'})
        
        if not product_cards:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ data-testid='product-card'")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            product_cards = soup.find_all('div', class_='_Ud0k')
            if product_cards:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(product_cards)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª–∞—Å—Å—É '_Ud0k'")
            else:
                print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
                return products
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(product_cards)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        for i, card in enumerate(product_cards):
            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                name_elem = card.find('span', attrs={'itemprop': 'name'})
                name = name_elem.get_text().strip() if name_elem else f"–î–∏–≤–∞–Ω {i+1}"
                
                # URL —Ç–æ–≤–∞—Ä–∞
                url_elem = card.find('a', class_='qUioe')
                url = "https://www.divan.ru" + url_elem.get('href') if url_elem else None
                
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_elem = card.find('img', attrs={'itemprop': 'image'})
                image_url = img_elem.get('src') if img_elem else None
                
                # –¶–µ–Ω—ã
                price_elem = card.find('span', attrs={'data-testid': 'price'})
                price = self.extract_price(price_elem.get_text()) if price_elem else None
                
                # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞)
                old_price_elem = card.find('span', class_='ui-SVNym')
                old_price = self.extract_price(old_price_elem.get_text()) if old_price_elem else None
                
                # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
                discount_elem = card.find('div', class_='ui-OQy8X')
                discount_percent = int(discount_elem.get_text()) if discount_elem else None
                
                # –†–∞–∑–º–µ—Ä—ã
                dimensions = {}
                specs_container = card.find('div', class_='nfZ4w')
                if specs_container:
                    dimensions = self.extract_dimensions(specs_container)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
                product = {
                    'name': name,
                    'price': price,
                    'old_price': old_price,
                    'discount_percent': discount_percent,
                    'dimensions': dimensions.get('dimensions', ''),
                    'sleeping_dimensions': dimensions.get('sleeping_dimensions', ''),
                    'url': url,
                    'image_url': image_url
                }
                
                products.append(product)
                print(f"   ‚úÖ {name[:50]}... - {price} —Ä—É–±.")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
                continue
        
        return products
    
    def save_to_database(self, products):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not products:
            print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_query = """
            INSERT INTO divans (name, price, old_price, discount_percent, dimensions, sleeping_dimensions, url, image_url)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """
            
            for product in products:
                cursor.execute(insert_query, (
                    product['name'],
                    product['price'],
                    product['old_price'],
                    product['discount_percent'],
                    product['dimensions'],
                    product['sleeping_dimensions'],
                    product['url'],
                    product['image_url']
                ))
            
            conn.commit()
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            if conn:
                conn.close()
    
    def scrape(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üéØ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–≤–∞–Ω–æ–≤")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.create_table()
            
            print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∏–≤–∞–Ω–æ–≤ —Å divan.ru...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = requests.get(self.base_url, headers=self.headers, timeout=30)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
            products = self.parse_products(soup)
            
            if products:
                print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self.save_to_database(products)
                
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                df = pd.DataFrame(products)
                print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º:")
                print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['price'].mean():.0f} —Ä—É–±.")
                print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {df['price'].min():.0f} —Ä—É–±.")
                print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {df['price'].max():.0f} —Ä—É–±.")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                csv_filename = f"divans_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                df.to_csv(csv_filename, index=False, encoding='utf-8-sig')
                print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_filename}")
                
            else:
                print("‚ùå –¢–æ–≤–∞—Ä—ã –¥–∏–≤–∞–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

if __name__ == "__main__":
    scraper = DivanScraper()
    scraper.scrape()
