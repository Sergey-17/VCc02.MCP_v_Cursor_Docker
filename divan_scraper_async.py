import requests
from bs4 import BeautifulSoup
import asyncio
import asyncpg
import pandas as pd
import time
import re
from datetime import datetime
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DivanScraperAsync:
    def __init__(self):
        self.base_url = "https://www.divan.ru/blagoveshchensk/category/divany"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        self.db_config = {
            'host': os.getenv('DB_HOST'),
            'port': int(os.getenv('DB_PORT', 5432)),
            'database': os.getenv('DB_NAME'),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD')
        }
        
    async def create_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã divans –≤ PostgreSQL"""
        try:
            conn = await asyncpg.connect(**self.db_config)
            
            create_table_query = """
            CREATE TABLE IF NOT EXISTS divans (
                id SERIAL PRIMARY KEY,
                name VARCHAR(500),
                price_original DECIMAL(10, 2),
                price_discount DECIMAL(10, 2),
                discount_percent INTEGER,
                dimensions VARCHAR(100),
                sleeping_dimensions VARCHAR(100),
                material VARCHAR(200),
                color VARCHAR(100),
                style VARCHAR(100),
                features TEXT[],
                url VARCHAR(500),
                scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """
            
            await conn.execute(create_table_query)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ divans —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            await conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def get_page_content(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            response = requests.get(url, headers=self.headers, timeout=30)
            response.raise_for_status()
            return response.text
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {e}")
            return None
    
    def parse_divan_item(self, item_div):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–∏–≤–∞–Ω–∞"""
        try:
            # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–≤–∞–Ω–∞
            name_elem = item_div.find('h3', class_='product-card__title')
            name = name_elem.get_text(strip=True) if name_elem else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –¶–µ–Ω—ã
            price_original = None
            price_discount = None
            discount_percent = None
            
            price_elem = item_div.find('span', class_='price__current')
            if price_elem:
                price_text = price_elem.get_text(strip=True)
                price_discount = self.extract_price(price_text)
            
            old_price_elem = item_div.find('span', class_='price__old')
            if old_price_elem:
                old_price_text = old_price_elem.get_text(strip=True)
                price_original = self.extract_price(old_price_text)
                
                if price_original and price_discount:
                    discount_percent = int(((price_original - price_discount) / price_original) * 100)
            
            # –†–∞–∑–º–µ—Ä—ã
            dimensions = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            sleeping_dimensions = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            dimensions_elem = item_div.find('div', class_='product-card__dimensions')
            if dimensions_elem:
                dim_text = dimensions_elem.get_text(strip=True)
                if '–°–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ' in dim_text:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–ø–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
                    sleeping_match = re.search(r'–°–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ.*?(\d+\s*x\s*\d+\s*x\s*\d+)', dim_text)
                    if sleeping_match:
                        sleeping_dimensions = sleeping_match.group(1)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                    general_match = re.search(r'–†–∞–∑–º–µ—Ä—ã.*?(\d+\s*x\s*\d+\s*x\s*\d+)', dim_text)
                    if general_match:
                        dimensions = general_match.group(1)
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ü–≤–µ—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            material = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            color = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –°—Ç–∏–ª—å –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            style = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            features = []
            
            # URL —Ç–æ–≤–∞—Ä–∞
            url = ""
            link_elem = item_div.find('a', class_='product-card__link')
            if link_elem and link_elem.get('href'):
                url = "https://www.divan.ru" + link_elem.get('href')
            
            return {
                'name': name,
                'price_original': price_original,
                'price_discount': price_discount,
                'discount_percent': discount_percent,
                'dimensions': dimensions,
                'sleeping_dimensions': sleeping_dimensions,
                'material': material,
                'color': color,
                'style': style,
                'features': features,
                'url': url
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
            return None
    
    def extract_price(self, price_text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            price_clean = re.sub(r'[^\d]', '', price_text)
            if price_clean:
                return float(price_clean)
        except:
            pass
        return None
    
    def scrape_divans(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–≤–∞–Ω–æ–≤"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∏–≤–∞–Ω–æ–≤ —Å divan.ru...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        content = self.get_page_content(self.base_url)
        if not content:
            return []
        
        soup = BeautifulSoup(content, 'html.parser')
        
        # –ò—â–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–∏–≤–∞–Ω–æ–≤
        divan_items = soup.find_all('div', class_='product-card')
        
        if not divan_items:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –¥–∏–≤–∞–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return []
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(divan_items)}")
        
        scraped_data = []
        
        for i, item in enumerate(divan_items, 1):
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {i}/{len(divan_items)}")
            
            divan_data = self.parse_divan_item(item)
            if divan_data:
                scraped_data.append(divan_data)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(scraped_data)}")
        return scraped_data
    
    async def save_to_database(self, divans_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL"""
        if not divans_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        try:
            conn = await asyncpg.connect(**self.db_config)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_query = """
            INSERT INTO divans (
                name, price_original, price_discount, discount_percent,
                dimensions, sleeping_dimensions, material, color, style, features, url
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
            """
            
            for divan in divans_data:
                await conn.execute(insert_query, 
                    divan['name'],
                    divan['price_original'],
                    divan['price_discount'],
                    divan['discount_percent'],
                    divan['dimensions'],
                    divan['sleeping_dimensions'],
                    divan['material'],
                    divan['color'],
                    divan['style'],
                    divan['features'],
                    divan['url']
                )
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(divans_data)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            await conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("üéØ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–≤–∞–Ω–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        await self.create_table()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        divans_data = self.scrape_divans()
        
        if divans_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.save_to_database(divans_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(divans_data)}")
            
            prices = [d['price_discount'] for d in divans_data if d['price_discount']]
            if prices:
                print(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {sum(prices) / len(prices):.2f} —Ä—É–±.")
                print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min(prices)} —Ä—É–±.")
                print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max(prices)} —Ä—É–±.")
            
            print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scraper = DivanScraperAsync()
    await scraper.run()

if __name__ == "__main__":
    asyncio.run(main())
