import asyncio
import json
import os
import psycopg2
import pandas as pd
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DivanScraperMCP:
    """–ü–∞—Ä—Å–µ—Ä –¥–∏–≤–∞–Ω–æ–≤ —á–µ—Ä–µ–∑ MCP webscraping"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.url = "https://www.divan.ru/blagoveshchensk/category/divany"
        self.db_config = {
            'host': os.getenv('DB_HOST'),
            'port': int(os.getenv('DB_PORT', 5432)),
            'database': os.getenv('DB_NAME'),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD')
        }
        
    def create_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã divans –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            create_table_query = """
            CREATE TABLE IF NOT EXISTS divans (
                id SERIAL PRIMARY KEY,
                name VARCHAR(500),
                price DECIMAL(10,2),
                old_price DECIMAL(10,2),
                discount_percent INTEGER,
                dimensions VARCHAR(100),
                sleeping_dimensions VARCHAR(100),
                url VARCHAR(500),
                image_url VARCHAR(500),
                scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """
            cursor.execute(create_table_query)
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ divans –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            
            cursor.close()
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def save_to_database(self, products):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not products:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return 0
        
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            saved_count = 0
            for product in products:
                try:
                    insert_query = """
                    INSERT INTO divans (name, price, old_price, discount_percent, 
                                      dimensions, sleeping_dimensions, url, image_url)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    """
                    
                    cursor.execute(insert_query, (
                        product.get('name'),
                        product.get('price'),
                        product.get('old_price'),
                        product.get('discount_percent'),
                        product.get('dimensions'),
                        product.get('sleeping_dimensions'),
                        product.get('url'),
                        product.get('image_url')
                    ))
                    saved_count += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ '{product.get('name', 'Unknown')}': {e}")
                    continue
            
            conn.commit()
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {saved_count} –¥–∏–≤–∞–Ω–æ–≤")
            
            cursor.close()
            conn.close()
            
            return saved_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return 0
    
    def extract_price(self, price_text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not price_text:
            return None
        
        import re
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Ü–µ–Ω—ã
        price_match = re.search(r'(\d[\d\s]*)', price_text.replace(' ', ''))
        if price_match:
            try:
                price = int(price_match.group(1).replace(' ', ''))
                return price
            except ValueError:
                return None
        return None
    
    def calculate_discount(self, old_price, current_price):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏"""
        if old_price and current_price and old_price > current_price:
            discount = int(((old_price - current_price) / old_price) * 100)
            return discount
        return None
    
    def parse_products_from_mcp(self, mcp_response):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ MCP webscraping"""
        products = []
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
            if isinstance(mcp_response, str):
                data = json.loads(mcp_response)
            else:
                data = mcp_response
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ MCP...")
            print(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(data)}")
            print(f"–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(data.keys()) if isinstance(data, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            product_data = None
            
            if isinstance(data, dict):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
                possible_keys = ['products', 'items', 'data', 'result', 'content', 'products_data']
                for key in possible_keys:
                    if key in data:
                        product_data = data[key]
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –∫–ª—é—á–µ: {key}")
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª—é—á–∞–º, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                if not product_data:
                    text_content = data.get('text', '')
                    if text_content:
                        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
                        product_data = self.parse_text_content(text_content)
            
            if not product_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ –æ—Ç–≤–µ—Ç–µ MCP")
                return products
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if isinstance(product_data, list):
                for item in product_data:
                    if isinstance(item, dict):
                        product = self.parse_single_product(item)
                        if product:
                            products.append(product)
            elif isinstance(product_data, dict):
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç
                product = self.parse_single_product(product_data)
                if product:
                    products.append(product)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ MCP: {e}")
            print(f"–û—Ç–≤–µ—Ç MCP: {mcp_response[:500]}...")
        
        return products
    
    def parse_text_content(self, text_content):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        products = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = text_content.split('\n')
        current_product = {}
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
            
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏–≤–∞–Ω–æ–≤ (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–æ–≤–∞ "–¥–∏–≤–∞–Ω", "—É–≥–ª–æ–≤–æ–π", "–ø—Ä—è–º–æ–π")
            if any(keyword in line.lower() for keyword in ['–¥–∏–≤–∞–Ω', '—É–≥–ª–æ–≤–æ–π', '–ø—Ä—è–º–æ–π', '–º—è–≥–∫–∞—è –º–µ–±–µ–ª—å']):
                if current_product:
                    products.append(current_product)
                current_product = {'name': line}
            
            # –ò—â–µ–º —Ü–µ–Ω—ã
            elif '‚ÇΩ' in line or '—Ä—É–±' in line.lower():
                price = self.extract_price(line)
                if price:
                    if 'old_price' not in current_product:
                        current_product['old_price'] = price
                    else:
                        current_product['price'] = price
            
            # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã
            elif '—Å–º' in line or 'x' in line:
                if 'dimensions' not in current_product:
                    current_product['dimensions'] = line
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç
        if current_product:
            products.append(current_product)
        
        return products
    
    def parse_single_product(self, item):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            product = {}
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            product['name'] = item.get('name') or item.get('title') or item.get('product_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏–≤–∞–Ω'
            
            # URL
            product['url'] = item.get('url') or item.get('link') or item.get('href') or ''
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            product['image_url'] = item.get('image_url') or item.get('image') or item.get('img') or ''
            
            # –¶–µ–Ω—ã
            price_text = item.get('price') or item.get('current_price') or ''
            old_price_text = item.get('old_price') or item.get('original_price') or ''
            
            product['price'] = self.extract_price(price_text)
            product['old_price'] = self.extract_price(old_price_text)
            
            # –°–∫–∏–¥–∫–∞
            if product['old_price'] and product['price']:
                product['discount_percent'] = self.calculate_discount(product['old_price'], product['price'])
            else:
                product['discount_percent'] = None
            
            # –†–∞–∑–º–µ—Ä—ã
            product['dimensions'] = item.get('dimensions') or item.get('size') or ''
            product['sleeping_dimensions'] = item.get('sleeping_dimensions') or item.get('sleeping_size') or ''
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ
            if product['name'] and product['name'] != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏–≤–∞–Ω':
                return product
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        
        return None
    
    def export_to_csv(self, products):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
        if not products:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        try:
            df = pd.DataFrame(products)
            filename = f"divans_mcp_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            df.to_csv(filename, index=False, encoding='utf-8-sig')
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV: {filename}")
            print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")
    
    def scrape(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–≤–∞–Ω–æ–≤ —á–µ—Ä–µ–∑ MCP webscraping")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.create_table()
        
        print(f"üåê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {self.url}")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –Ω—É–∂–µ–Ω MCP webscraping —Å–µ—Ä–≤–µ—Ä!")
        print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ MCP webscraping:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MCP webscraping: npm install -g webscraping-ai-mcp")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ MCP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –≤–∞—à–µ–º MCP –∫–ª–∏–µ–Ω—Ç–µ")
        print("=" * 60)
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ MCP webscraping
        # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ MCP, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        print("üîß –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_products = [
            {
                'name': '–î–∏–≤–∞–Ω "–ö–æ–º—Ñ–æ—Ä—Ç" —É–≥–ª–æ–≤–æ–π —Å –ø–æ–¥–ª–æ–∫–æ—Ç–Ω–∏–∫–∞–º–∏',
                'price': 45000,
                'old_price': 60000,
                'discount_percent': 25,
                'dimensions': '200x80x85 —Å–º',
                'sleeping_dimensions': '160x200 —Å–º',
                'url': 'https://www.divan.ru/product/test1',
                'image_url': 'https://example.com/image1.jpg'
            },
            {
                'name': '–î–∏–≤–∞–Ω "–£—é—Ç" –ø—Ä—è–º–æ–π —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –µ–≤—Ä–æ–∫–Ω–∏–∂–∫–∞',
                'price': 35000,
                'old_price': 45000,
                'discount_percent': 22,
                'dimensions': '180x75x80 —Å–º',
                'sleeping_dimensions': '180x200 —Å–º',
                'url': 'https://www.divan.ru/product/test2',
                'image_url': 'https://example.com/image2.jpg'
            }
        ]
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(test_products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        saved_count = self.save_to_database(test_products)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
        self.export_to_csv(test_products)
        
        print("\nüìä –ò–¢–û–ì–ò –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(test_products)}")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_count}")
        print(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV: ‚úÖ")
        
        print("\nüîß –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ MCP webscraping:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ MCP webscraping —Å–µ—Ä–≤–µ—Ä")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã MCP")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã: webscraping_ai_fields, webscraping_ai_selected")
        
        return test_products

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scraper = DivanScraperMCP()
    scraper.scrape()

if __name__ == "__main__":
    main()
